import React, { Component } from 'react';
import { Spinner, Container, Row, Col, Alert, Table, Button, Card, CardHeader, CardBody } from 'reactstrap'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faInfoCircle, faUndo } from '@fortawesome/free-solid-svg-icons'
import { Doughnut } from 'react-chartjs-2';
import { LightenDarkenColor } from 'lighten-darken-color';
import API from '../../api'
var randomColor = require('random-color');
class ExploitationSummary extends Component {
    constructor(props) {
        super(props)
        this.state = { isLoading: true, error: null, systemsData: {}, totalSystems: 0, vulnerabilityCount: {} }
        this.loadSystems = this.loadSystems.bind(this)
    }
    async componentDidMount() {
        await this.loadSystems()
    }

    async loadSystems() {
        this.setState({ 'isLoading': true })
        var response = await API.getAllLocalSystems()
        if (response.success) {
            var systems = response.data
            var systemsInfo = {}
            var vulnerabiltiyCount = {}
            for (var ipaddress of systems) {
                response = await API.getLatestExploitationData(ipaddress)
                console.log(response)
                if (response.success === false) {
                    systemsInfo[ipaddress] = null
                } else {
                    var data = response.data
                    systemsInfo[ipaddress] = data
                    vulnerabiltiyCount[ipaddress] = data.length

                }
            }
            this.setState({ error: "", systemsData: systemsInfo, totalSystems: systems.length, vulnerabilityCount: vulnerabiltiyCount, isLoading: false })
        } else {
            this.setState({ error: response.error, isLoading: false })
            return null
        }
    }

    render() {
        var loading = (this.state.isLoading) ? <Row><Col sm={{ size: 2, offset: 5 }}><Spinner color="info" /></Col></Row> : null;
        var data = (!this.state.isLoading) ? ((this.state.error) ? <Alert color="warning">{this.state.error}</Alert> : null) : null

        if (this.state.totalSystems > 0 && Object.values(this.state.vulnerabilityCount).reduce((a, b) => a + b, 0) > 0) {
            var colorPairs = this.getColorPairs(2)
            var statusDoughnut = {
                labels: [
                    'Vulnerable',
                    'Safe',
                ],
                datasets: [{
                    data: [Object.values(this.state.vulnerabilityCount).filter(i => i > 0).length, Object.values(this.state.vulnerabilityCount).filter(i => i === 0).length],
                    backgroundColor: colorPairs.normal,
                    hoverBackgroundColor: colorPairs.hover
                }]
            };
            var colorPair = this.getColorPairs(Object.keys(this.state.vulnerabilityCount).length)
            var vulnCountDoughnut = {
                labels: Object.keys(this.state.vulnerabilityCount),
                datasets: [{
                    data: Object.values(this.state.vulnerabilityCount),
                    backgroundColor: colorPair.normal,
                    hoverBackgroundColor: colorPair.hover
                }]
            };
            data = (<>
                <Container>
                    <Row className="mb-2">
                        <Col>
                            <Alert color="warning" style={{ lineHeight: '2rem' }}><FontAwesomeIcon icon={faInfoCircle}></FontAwesomeIcon> {Object.values(this.state.vulnerabilityCount).filter(i => i > 0).length} out of {this.state.totalSystems} system(s) are vulnerable.<Button color="warning" className="float-right" onClick={this.loadSystems}><FontAwesomeIcon icon={faUndo}></FontAwesomeIcon> Reload</Button></Alert>
                        </Col>
                    </Row>

                    <Row className="mb-4">
                        <Col md="6">
                            <Card>
                                <CardHeader>Status Graph</CardHeader>
                                <CardBody>
                                    <Doughnut data={statusDoughnut} />
                                </CardBody>
                            </Card>
                        </Col>
                        <Col>
                            <Card>
                                <CardHeader>Vulnerability Graph</CardHeader>
                                <CardBody>
                                    <Doughnut data={vulnCountDoughnut} />
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>



                    <Table>
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>IP Address</th>
                                <th>Status</th>
                                <th>Port</th>
                                <th>Exploit</th>
                                <th>Payload</th>
                                <th>Engine</th>
                                <th>Timestamp</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                Object.keys(this.state.systemsData).map((ipaddress, i) => {

                                    var vulns = this.state.systemsData[ipaddress]
                                    if (vulns == null) {
                                        return (<></>)
                                    }
                                    return vulns.map((data, i) => {
                                        console.log(data)
                                        return (

                                            <tr key={"tr-" + i}>
                                                <th scope="row">{i + 1}</th>
                                                <td>{ipaddress}</td>
                                                <td>{(this.state.vulnerabilityCount[ipaddress] > 0) ? <>Vulnerable</> : <>Safe</>}</td>
                                                <td>{data.port}</td>
                                                <td>{(data.exploit)}</td>
                                                <td>{data.payload}</td>
                                                <td>{data.using}</td>
                                                <td>{data.timestamp}</td>
                                            </tr>

                                        )
                                    })

                                })
                            }
                        </tbody>
                    </Table>
                </Container>
            </>)
        } else {
            data = (<>
                <Alert color="success">Hurrah! No vulnerablities found yet!!</Alert>
            </>)
        }

        return (<>
            {(loading) ? loading : data}
        </>)
    }
    getColorPairs(count) {
        var colArr = []
        var hoverArr = []
        for (var i = 0; i < count; i++) {
            var col = randomColor().hexString()
            colArr.push(col)
            hoverArr.push(LightenDarkenColor(col, 60))
        }
        return { normal: colArr, hover: hoverArr }


    }
}



export default ExploitationSummary